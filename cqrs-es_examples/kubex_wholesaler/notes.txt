**Wyjaśnianie różnicy w importach**

Pierwszy przypadek importuje typ `Display` oraz moduł `io`. Dzięki temu, można odwoływać się do `io::Result`, ale nie do samego `Result`. Drugi przypadek natomiast importuje typ `Display` oraz alias `Result` z modułu `io`, co sprawia, że `Result` jest dostępne jako alias dla `std::io::Result`, zastępując użycie klasycznego `Result` z prelude. Krótko mówiąc, w pierwszym przypadku masz moduł, w drugim alias.


Myślał przez 5 s


They actually bring different things into scope:

1. ```rust
   use std::fmt::Display;
   use std::io;
   ```

   * **Imports the trait** `std::fmt::Display` under the name `Display`.
   * **Imports the module** `std::io` under the name `io`.
   * **What you can write:**

     ```rust
     fn foo<T: Display>(x: T) { /*…*/ }

     // To use the IO alias, you must qualify it:
     fn bar() -> io::Result<String> { Ok("hi".to_string()) }
     ```
   * **You do *not* get** an unqualified `Result` in scope—only the module `io`.

2. ```rust
   use std::{fmt::Display, io::Result};
   ```

   * **Imports the trait** `std::fmt::Display` as before.
   * **Imports the type alias** `std::io::Result<T>` into scope **as** `Result`.
   * **What you can write:**

     ```rust
     fn foo<T: Display>(x: T) { /*…*/ }

     // Now `Result` by itself means `std::io::Result<T>`
     fn bar() -> Result<String> { Ok("hi".to_string()) }
     ```
   * **You do *not* get** the module `io` in scope—only its `Result` alias.

---

### Why it matters for your error

When you did

```rust
use std::{fmt::Display, io::Result};
```

every plain `Result<…>` in that file refers to **`std::io::Result<…>`** (one type parameter), not the prelude’s two-generic `Result<T, E>`. That’s why writing

```rust
-> Result<(), StockError>
```

gave “takes 1 but you supplied 2”—you’d tried to feed two type arguments into `std::io::Result<T>`. If you instead do

```rust
use std::fmt::Display;
use std::io;      // bring in the module, not the type alias
```

then an unqualified `Result<T, E>` refers to the prelude’s two-parameter enum, and your `Result<(), StockError>` will compile as you expect.

